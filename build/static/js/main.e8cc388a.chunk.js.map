{"version":3,"sources":["helpers.js","components/store_picker.js","components/header.js","components/order.js","components/add_fish_form.js","components/edit_fish_form.js","components/login.js","base.js","components/inventory.js","components/fish.js","sample-fishes.js","components/app.js","components/not_found.js","components/router.js","index.js"],"names":["formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","StorePicker","myInput","React","createRef","goToStore","e","preventDefault","props","history","push","current","value","className","onSubmit","this","type","ref","required","placeholder","defaultValue","Component","proptypes","PropTypes","object","Header","subtitle","Order","renderOrder","key","fish","fishes","count","order","isAvailable","status","transitionOptions","classNames","timeout","enter","exit","CSSTransition","TransitionGroup","component","name","price","onClick","removeFromOrder","orderIds","Object","keys","total","reduce","prevTotal","map","AddFishForm","nameRef","priceRef","statusRef","descRef","imageRef","createFish","body","parseFloat","desc","image","addFish","currentTarget","reset","EditFishForm","handleChange","console","log","updateFish","index","onChange","deleteFish","Login","authenticate","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","Inventory","state","uid","owner","authHandler","authData","a","fetch","storeId","context","store","post","data","user","setState","id","provider","authProvider","auth","signInWithPopup","then","logout","signOut","onAuthStateChanged","loadFishes","Fish","available","src","alt","disabled","addToOrder","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","App","Date","now","updatedFish","localStorageRef","localStorage","getItem","match","params","JSON","parse","syncState","setItem","stringify","removeBinding","NotFound","Router","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8cc388a.chunk.js","sourcesContent":["export function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"wives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getFunName } from '../helpers'\n\nclass StorePicker extends Component {\n    myInput = React.createRef(); // this allows me to the inout value as ref from the form and use it in goToStore function\n    static proptypes = {\n        history: PropTypes.object\n    }\n\n    goToStore = (e) => {\n        e.preventDefault()\n        this.props.history.push(`/store/${this.myInput.current.value}`)\n    }\n\n    render() {\n        return (\n            <form className=\"store-selector\" onSubmit={this.goToStore}>\n                <h2>Please Enter a Store</h2>\n                <input type=\"text\" ref={this.myInput} required placeholder=\"Store Name\" defaultValue={getFunName()}/>\n                <button type=\"submit\"> Visit Store </button>\n            </form>\n        )\n    }\n}\n\nexport default StorePicker","import React from 'react';\nimport PropTypes from 'prop-types';\n// propTypes specifies the type of data that needs to be passed on\n\nconst Header = ({subtitle}) => (\n    <header className=\"top\">\n        <h1>\n            Catch \n            <span className=\"ofThe\">\n                <span className=\"of\">Of</span>\n                <span className=\"the\">The</span>\n            </span> \n            Day\n        </h1>  \n        <h3 className=\"tagline\">\n            <span>{subtitle}</span>\n        </h3>\n    </header>  \n)\n\nHeader.propTypes = {\n    subtitle: PropTypes.string.isRequired\n}\nexport default Header","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {formatPrice} from '../helpers';\nimport {TransitionGroup, CSSTransition } from 'react-transition-group';\n\n\nclass Order extends Component {\n  static propTypes = {\n    fishes: PropTypes.object,\n    order: PropTypes.object,\n    removeFromOrder: PropTypes.func,\n  }\n\n    renderOrder = key => {\n        const fish = this.props.fishes[key];\n        const count = this.props.order[key];\n        const isAvailable = fish && fish.status === \"available\";\n        const transitionOptions = {\n            classNames: \"order\",\n            key,\n            timeout: { enter: 500, exit: 500 }\n        };\n\n        if(!fish) return null\n        if (!isAvailable) {\n            return (\n              <CSSTransition {...transitionOptions}>\n                <li key={key}>\n                  Sorry {fish ? fish.name : \"fish\"} is no longer available\n                </li>\n              </CSSTransition>\n            );\n          };\n\n          return (\n            <CSSTransition {...transitionOptions}>\n              <li key={key}>\n                <span>\n                  <TransitionGroup component=\"span\">\n                      <span>{count}</span>\n                  </TransitionGroup>\n                  lbs {fish.name} - \n                  {formatPrice(count * fish.price)}\n                  <button onClick={() => this.props.removeFromOrder(key)}>\n                    &times;\n                  </button>\n                </span>\n              </li>\n            </CSSTransition>\n          );\n        };\n\n\n    render(){\n        // iterate over the order that we got as props from the app\n        const orderIds = Object.keys(this.props.order);\n\n        // calculate the total. we need the fish in the order and the count\n        const total = orderIds.reduce((prevTotal, key) => {\n            // the key was passed as index in the app to Fish component, it has is the same to find in fishes and order in state\n            const fish = this.props.fishes[key];\n            const count = this.props.order[key];\n            const isAvailable = fish && fish.status === \"available\";\n            \n            if(isAvailable){\n                return prevTotal + (count * fish.price);\n            }\n            return prevTotal\n        }, 0)\n\n\n        return(\n            <div className=\"order-wrap\">\n               <h2>Order</h2>\n               <TransitionGroup component=\"ul\" className=\"order\"> {orderIds.map(this.renderOrder)}</TransitionGroup>\n               <div className=\"total\">\n                   Total:\n                   <strong>{formatPrice(total)}</strong>\n               </div>\n            </div>\n        )    \n        \n    }\n}\n\nexport default Order","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass AddFishForm extends Component {\n    nameRef = createRef();\n    priceRef = createRef();\n    statusRef = createRef();\n    descRef = createRef();\n    imageRef = createRef();\n    \n    static propTypes ={\n        addFish: PropTypes.func\n    }\n\n    createFish = e =>{\n        e.preventDefault()\n        const body = {\n            name: this.nameRef.current.value,\n            price: parseFloat(this.priceRef.current.value),\n            status: this.statusRef.current.value,\n            desc: this.descRef.current.value,\n            image: this.imageRef.current.value\n          };\n          this.props.addFish(body);\n        // refresh the form\n          e.currentTarget.reset();\n    }\n\n    render(){\n        return(\n            <form className=\"fish-edit\" onSubmit={this.createFish}>\n                <input name=\"name\" ref={this.nameRef} type=\"text\" placeholder=\"Name\" />\n                <input\n                name=\"price\"\n                ref={this.priceRef}\n                type=\"text\"\n                placeholder=\"Price\"\n                />\n                <select name=\"status\" ref={this.statusRef}>\n                <option value=\"available\">Fresh!</option>\n                <option value=\"unavailable\">Sold Out!</option>\n                </select>\n\n                <textarea name=\"desc\" ref={this.descRef} placeholder=\"Desc\" />\n                <input\n                name=\"image\"\n                ref={this.imageRef}\n                type=\"text\"\n                placeholder=\"Image\"\n                />\n                <button type=\"submit\">+ Add Fish</button>\n            </form>\n        )\n    }\n}\n\nexport default AddFishForm","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nclass EditFishForm extends Component{\n    static propTypes = {\n        fish: PropTypes.shape({\n            index: PropTypes.string,\n            updateFish: PropTypes.func\n        })\n    };\n\n    handleChange = (e) => {\n        // instead of unigs ref to get the value of each input (like we did in addFishForm) we can use the event.currentTarget.value\n        console.log(e.currentTarget.value)\n        // take a copy o fthe current fish we want to update\n        const updateFish = {\n            ...this.props.fish, \n            // instead of changin a specifi input, we just use computed property names - and by saying \"e.currentTarget.name\" it knows which name (name=name, name=price, name=desc) to change\n            [e.currentTarget.name]: e.currentTarget.value\n        };\n\n        this.props.updateFish(this.props.index, updateFish)\n    }\n\n    render(){\n        return(\n            <div className=\"fish-edit\">\n                <input name=\"name\" \n                value={this.props.fish.name} \n                onChange={this.handleChange}\n                type=\"text\"/>\n\n                <input\n                name=\"price\"\n                value={this.props.fish.price}\n                onChange={this.handleChange}\n                type=\"text\"/>\n\n                <select name=\"status\"   \n                value={this.props.fish.status} \n                onChange={this.handleChange}>\n                <option value=\"available\">Fresh!</option>\n                <option value=\"unavailable\">Sold Out!</option>\n                </select>\n\n                <textarea name=\"desc\"\n                value={this.props.fish.desc} \n                onChange={this.handleChange}\n                />\n                <input\n                name=\"image\"\n                value={this.props.fish.image}\n                onChange={this.handleChange}\n                type=\"text\"\n                />\n                <button onClick={() => this.props.deleteFish(this.props.index)}>Remove Fish</button>\n            </div>\n        )\n    }\n}\n\nexport default EditFishForm","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\n\nconst Login = (props) => (\n    <nav className=\"login\">\n        <h2>Inventory Login </h2>\n        <p>Sign in to manage your store's inventory</p>\n        <button\n            className=\"github\" onClick={() => props.authenticate(\"Github\")}>\n                Login with Github\n        </button>\n        <button\n            className=\"facebook\" onClick={()=> props.authenticate(\"Facebook\")}>\n                Login with Facebook\n        </button>\n        <button\n            className=\"twitter\" onClick={()=> props.authenticate(\"Google\")}>\n                Login with Google\n        </button>\n    </nav>\n)    \n\nLogin.propTypes = {\n    authenticate: PropTypes.func.isRequired\n}\nexport default Login","import Rebase from 're-base';\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyBkD27axO9sooM_fyR0Q5hDaX2q4dytznE\",\n    authDomain: \"catch-of-the-day---aso.firebaseapp.com\",\n    databaseURL: \"https://catch-of-the-day---aso-default-rtdb.firebaseio.com\"\n  })\n\n  const base = Rebase.createClass(firebaseApp.database())\n\n  export {firebaseApp};\n\n  export default base;","import React, { Component } from 'react';\nimport AddFishForm from './add_fish_form';\nimport EditFishForm from './edit_fish_form';\nimport Login from './login';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\nimport base, {firebaseApp} from '../base';\n\nclass Inventory extends Component {\n    static propTypes = {\n        fishes: PropTypes.object,\n        updateFish: PropTypes.func,\n        deleteFish: PropTypes.func,\n        loadFishes: PropTypes.func\n    }\n    state = {\n        uid: null,\n        owner: null\n    };\n\n    // checking if there's a user  logged in  everytime we render the component\n    componentDidMount() {\n        firebase.auth.onAuthStateChanged(user => {\n            if(user){\n                this.authHandler({user})\n            }\n        })\n    }\n\n    authHandler = async (authData) => {\n        console.log(authData)\n    // look up the curr store in database\n        const store =  await base.fetch(this.props.storeId, {context: this})\n        console.log(store)\n    // claim it if there's no owner\n        if(!store.owner){\n            await base.post(`${this.props.storeId}/owner`, {\n                data: authData.user.uid\n            })\n        }\n\n    // set the state of the inventoryto reflect the current user\n        this.setState({\n            uid: authData.user.uid,\n            owner: store.owner || authData.user.id\n        });\n    };\n\n    authenticate = (provider) => {\n        const authProvider = new firebase.auth[`${provider}AuthProvider`]();\n        firebaseApp.auth().signInWithPopup(authProvider).then(this.authHandler)\n    }\n\n    logout = async () => {\n        await firebase.auth().signOut();\n        this.setState({\n            uid: null\n        });\n    };\n\n    render(){\n        const logout = <button onClick={this.logout}>Log Out!</button>\n        // check if user is logged in\n        if(!this.state.uid){\n            return <Login authenticate={this.authenticate}/>\n        }\n        //  check if user is  not the owner of the store\n        if(this.state.uid !== this.state.owner){\n            return <div>\n                    <p>Sorry, you are not the owner of this store</p>\n                    {logout}\n                </div>\n        }\n        // they must be the owner, render their inventory\n        return(\n            <div className=\"inventory\">\n                <h2>Inventory</h2>\n                {logout}\n                {Object.keys(this.props.fishes).map(key => <EditFishForm fish={this.props.fishes[key]} key={key} index={key} updateFish={this.props.updateFish} deleteFish={this.props.deleteFish}/>)}\n                < AddFishForm addFish={this.props.addFish}/>\n                <button onClick={this.props.loadFishes}>Load Sample Fishes</button>\n            </div>\n        )    \n    }\n}\n\nexport default Inventory","import React, { Component } from 'react';\nimport {formatPrice} from '../helpers';\nimport PropTypes from 'prop-types';\n\n\nclass Fish extends Component {\n    // static because even though we are creating multiple fish we use the same proptypes\n    static propTypes = {\n        // shape allows us to pass an object with specific properties\n        details: PropTypes.shape({\n            image: PropTypes.string,\n            name: PropTypes.string,\n            desc: PropTypes.string,\n            status: PropTypes.string,\n            price: PropTypes.number,\n        }),\n        addToOrder: PropTypes.func\n    };\n\n    render(){\n        const {image, name, price, desc, status} = this.props.fish\n        const available = status === \"available\"\n        return(\n            <div className=\"single-fish\">\n               <li className=\"menu-fish\">\n                   <img src={image} alt=\"\"/>\n                   <h3 className=\"fish-name\">\n                       {name}\n                       <span className=\"price\">{formatPrice(price)}</span>\n                    </h3>\n                    <p>{desc}</p>\n                    <button disabled={!available} \n                    onClick={() => this.props.addToOrder(this.props.index)}> \n                        {available ? \"Add to Order\" : \"Sold Out\"} \n                    </button>\n               </li>\n            </div>\n        )\n    }\n}\n\nexport default Fish","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React, { Component } from 'react';\nimport Header from './header';\nimport Order from './order';\nimport Inventory from './inventory';\nimport Fish from './fish'\nimport fishes from '../sample-fishes';\nimport base from '../base'\n\nclass App extends Component{\n    state = {\n        fishes: {},\n        order: {}\n    };\n\n    componentDidMount(){\n        // when the component mounts we need to check if there's something in local storage and if there is then we render it\n        const localStorageRef = localStorage.getItem(this.props.match.params.storeId)\n        if (localStorageRef){\n            this.setState({\n                order: JSON.parse(localStorageRef)\n            })\n        }\n    //    here ref belongs to firebase. refers to a piece of data in DB\n    // sync up with the fishes of a specific store.\n    // every time we visit a store base.syncState will store in the DB the fishes that belong to it \n        this.ref = base.syncState(`${this.props.match.params.storeId}/fishes`, {\n            context: this,\n            state: 'fishes'\n        });\n    }\n    // to persist the order we will use localStorage everytime the app updates \n    componentDidUpdate() {\n        // console.log(this.state.order)\n        // keept in localSotrage the order for a specifc store\n        localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order))\n    }\n\n\n    componentWillUnmount(){\n        // remove the reference to the store in the DB. Avoud memory leaks\n        base.removeBinding(this.ref)\n    }\n\n\n    addFish = body => {\n        // copy into a variable the fishes we have in state\n        const fishes = { ...this.state.fishes};\n\n        // add new fish to the veariable we created\n        fishes[`fish${Date.now()}`] = body\n        // call setSate to update state\n        this.setState({\n            fishes\n        })\n    }\n\n    updateFish = (key, updatedFish) =>{\n        // copy into a variable the fishes we have in state\n        const fishes = { ...this.state.fishes};\n        // update state\n        fishes[key] =  updatedFish;\n        // set state again\n        this.setState({fishes})\n    }\n\n    deleteFish = (key) =>{\n        const fishes = { ...this.state.fishes};\n        fishes[key] = null;\n        this.setState({fishes})\n    }\n\n    loadFishes = () => {\n        // console.log()s\n        this.setState({\n            fishes\n        })\n    }\n\n    addToOrder = (fish) =>{\n        //  copy state\n        const order = { ...this.state.order};\n        // add fish to cart or update quantity\n        order[fish] = order[fish] + 1 || 1\n        // call setSate to update state\n        this.setState({\n           order\n        })\n    }\n\n    removeFromOrder = (key) =>{\n        const order = { ...this.state.order};\n        // add fish to cart or update quantity\n        delete order[key] \n        // call setSate to update state\n        this.setState({\n           order\n        })\n    }\n    render() {\n        return(\n            <div className=\"catch-of-the-day\">\n                <div className=\"menu\">\n                    <Header subtitle=\"Fresh Seafood Market\"/>\n                    <ul className=\"fishes\">\n                        {/*iterate over the keys we have in object fishes in object state  */}\n                        {Object.keys(this.state.fishes).map(fish => <Fish fish={this.state.fishes[fish]} key={fish} index={fish} addToOrder={this.addToOrder}/> )}\n                    </ul>\n                </div>\n                <Order fishes={this.state.fishes} order={this.state.order} removeFromOrder={this.removeFromOrder}/>\n                <Inventory addFish={this.addFish} loadFishes={this.loadFishes} fishes={this.state.fishes} updateFish={this.updateFish} deleteFish={this.deleteFish} storeId={this.props.match.params.storeId}/>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\n\n\nconst NotFound = () => ( \n    <div>\n        <h2>Not found</h2>\n    </div>\n)\n\nexport default NotFound","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport StorePicker from './store_picker';\nimport App from './app'\nimport NotFound from './not_found'\n\n\nconst Router = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={StorePicker} />\n            <Route path=\"/store/:storeId\" component={App} />\n            <Route component={NotFound} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default Router;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './components/router'\n\nimport './css/style.css';\n// import StorePicker from './components/store_picker'\n\n\nReactDOM.render(\n    < Router />, document.getElementById('main')\n);"],"sourceRoot":""}